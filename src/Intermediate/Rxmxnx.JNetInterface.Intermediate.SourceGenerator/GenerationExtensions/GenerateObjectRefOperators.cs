using System;
using System.Runtime.CompilerServices;

using Microsoft.CodeAnalysis;

namespace Rxmxnx.JNetInterface.SourceGenerator;

internal static partial class GenerationExtensions
{
	private const String objectRefFormat = @"#nullable enable
// <auto-generated/>
namespace {0};

partial struct {1} 
{{{2}
	/// <summary>
	/// Determines whether a specified <see cref=""{1}""/> and a <see cref=""JObjectLocalRef""/> instance
	/// have the same value.
	/// </summary>
	/// <param name=""left"">The <see cref=""{1}""/> to compare.</param>
	/// <param name=""right"">The <see cref=""JObjectLocalRef""/> to compare.</param>
	/// <returns>
	/// <see langword=""true""/> if the value of <paramref name=""left""/> is the same as the value 
	/// of <paramref name=""right""/>; otherwise, <see langword=""false""/>.
	/// </returns>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Boolean operator ==({1} left, JObjectLocalRef right) => left._value.Equals(right);
	/// <summary>
	/// Determines whether a specified <see cref=""JObjectLocalRef""/> and a <see cref=""{1}""/> instance
	/// have the same value.
	/// </summary>
	/// <param name=""left"">The <see cref=""JObjectLocalRef""/> to compare.</param>
	/// <param name=""right"">The <see cref=""{1}""/> to compare.</param>
	/// <returns>
	/// <see langword=""true""/> if the value of <paramref name=""left""/> is the same as the value 
	/// of <paramref name=""right""/>; otherwise, <see langword=""false""/>.
	/// </returns>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Boolean operator ==(JObjectLocalRef left, {1} right) => left.Equals(right._value);

	/// <summary>
	/// Determines whether a specified <see cref=""{1}""/> and a <see cref=""JObjectLocalRef""/> instance
	/// have different values.
	/// </summary>
	/// <param name=""left"">The <see cref=""{1}""/> to compare.</param>
	/// <param name=""right"">The <see cref=""JObjectLocalRef""/> to compare.</param>
	/// <returns>
	/// <see langword=""true""/> if the value of <paramref name=""left""/> is different from the value  
	/// of <paramref name=""right""/>; otherwise, <see langword=""false""/>.
	/// </returns>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Boolean operator !=({1} left, JObjectLocalRef right) => !left._value.Equals(right);
	/// <summary>
	/// Determines whether a specified <see cref=""JObjectLocalRef""/> and a <see cref=""{1}""/> instance
	/// have different values.
	/// </summary>
	/// <param name=""left"">The <see cref=""JObjectLocalRef""/> to compare.</param>
	/// <param name=""right"">The <see cref=""{1}""/> to compare.</param>
	/// <returns>
	/// <see langword=""true""/> if the value of <paramref name=""left""/> is different from the value  
	/// of <paramref name=""right""/>; otherwise, <see langword=""false""/>.
	/// </returns>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Boolean operator !=(JObjectLocalRef left, {1} right) => !left.Equals(right._value);

	/// <summary>
	/// Converts a given <see cref=""JObjectLocalRef""/> to <see cref=""{1}""/> instance.
	/// </summary>
	/// <param name=""objRef"">A <see cref=""JObjectLocalRef""/> to convert.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	internal static {1} FromReference(in JObjectLocalRef objRef) 
		=> NativeUtilities.Transform<JObjectLocalRef, {1}>(in objRef);
}}
#nullable restore";

	private const String objectRefOverrideFormat = @"
	/// <inheritdoc/>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public override Int32 GetHashCode() => HashCode.Combine(this._value);
	/// <inheritdoc/>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public override Boolean Equals([NotNullWhen(true)] Object? obj) => {0}(this, obj);
";

	/// <summary>
	/// Generates operators for object reference structures.
	/// </summary>
	/// <param name="objRefSymbol">A type symbol of object reference structure.</param>
	/// <param name="context">Generation context.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void GenerateObjectRefOperators(this ISymbol objRefSymbol, GeneratorExecutionContext context)
	{
		String fileName = $"{objRefSymbol.Name}.ObjRef.g.cs";
		String equalFunction = objRefSymbol.Name.Contains("ArrayLocalRef") ?
			"JArrayLocalRef.ArrayEquals" :
			"JObjectLocalRef.ObjectEquals";
		String overrides = objRefSymbol.Name == "JArrayLocalRef" ?
			String.Empty :
			String.Format(GenerationExtensions.objectRefOverrideFormat, equalFunction);
		String source = String.Format(GenerationExtensions.objectRefFormat, objRefSymbol.ContainingNamespace,
		                              objRefSymbol.Name, overrides);
		context.AddSource(fileName, source);
	}
}