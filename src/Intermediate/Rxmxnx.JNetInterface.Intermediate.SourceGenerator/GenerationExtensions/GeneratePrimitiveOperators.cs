using System;
using System.Runtime.CompilerServices;

using Microsoft.CodeAnalysis;

namespace Rxmxnx.JNetInterface.SourceGenerator;

internal static partial class GenerationExtensions
{
	private const String primitiveOperatorsFormat = @"#nullable enable
// <auto-generated/>
namespace {0};

partial struct {1} 
{{
	/// <inheritdoc/>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public override Int32 GetHashCode() => HashCode.Combine(this._value);
	/// <inheritdoc/>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public override Boolean Equals([NotNullWhen(true)] Object? obj) 
		=> JPrimitiveMetadata.Equals<{1}, {2}>(this, obj);

	//{2}

	/// <summary>
	/// Determines whether two specified <see cref=""{1}""/> instances have the same value.
	/// </summary>
	/// <param name=""left"">The first <see cref=""{1}""/> to compare.</param>
	/// <param name=""right"">The second <see cref=""{1}""/> to compare.</param>
	/// <returns>
	/// <see langword=""true""/> if the value of <paramref name=""left""/> is the same as the value 
	/// of <paramref name=""right""/>; otherwise, <see langword=""false""/>.
	/// </returns>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Boolean operator ==({1} left, {1} right) => left.Equals(right);
	/// <summary>
	/// Determines whether two specified <see cref=""{1}""/> instances have different values.
	/// </summary>
	/// <param name=""left"">The first <see cref=""{1}""/> to compare.</param>
	/// <param name=""right"">The second <see cref=""{1}""/> to compare.</param>
	/// <returns>
	/// <see langword=""true""/> if the value of <paramref name=""left""/> is different from the value  
	/// of <paramref name=""right""/>; otherwise, <see langword=""false""/>.
	/// </returns>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Boolean operator !=({1} left, {1} right) => !(left == right);

	/// <summary>
	/// Determines whether <paramref name=""left""/> is greater than <paramref name=""right""/>.
	/// </summary>
	/// <param name=""left"">The first <see cref=""{1}""/> to compare.</param>
	/// <param name=""right"">The second <see cref=""{1}""/> to compare.</param>
	/// <returns>
	/// <see langword=""true""/> if the value of <paramref name=""left""/> is greater than the value  
	/// of <paramref name=""right""/>; otherwise, <see langword=""false""/>.
	/// </returns>
	public static Boolean operator >({1} left, {1} right) => left.CompareTo(right) > 0;
	/// <summary>
	/// Determines whether <paramref name=""left""/> is greater than or equal to <paramref name=""right""/>.
	/// </summary>
	/// <param name=""left"">The first <see cref=""{1}""/> to compare.</param>
	/// <param name=""right"">The second <see cref=""{1}""/> to compare.</param>
	/// <returns>
	/// <see langword=""true""/> if the value of <paramref name=""left""/> is greater than or equal to the value  
	/// of <paramref name=""right""/>; otherwise, <see langword=""false""/>.
	/// </returns>
	public static Boolean operator >=({1} left, {1} right) => left.CompareTo(right) >= 0;
	/// <summary>
	/// Determines whether <paramref name=""left""/> is less than or equal to <paramref name=""right""/>.
	/// </summary>
	/// <param name=""left"">The first <see cref=""{1}""/> to compare.</param>
	/// <param name=""right"">The second <see cref=""{1}""/> to compare.</param>
	/// <returns>
	/// <see langword=""true""/> if the value of <paramref name=""left""/> is less than or equal to the value  
	/// of <paramref name=""right""/>; otherwise, <see langword=""false""/>.
	/// </returns>
	public static Boolean operator <=({1} left, {1} right) => left.CompareTo(right) <= 0;
	/// <summary>
	/// Determines whether <paramref name=""left""/> is less than <paramref name=""right""/>.
	/// </summary>
	/// <param name=""left"">The first <see cref=""{1}""/> to compare.</param>
	/// <param name=""right"">The second <see cref=""{1}""/> to compare.</param>
	/// <returns>
	/// <see langword=""true""/> if the value of <paramref name=""left""/> is less than the value  
	/// of <paramref name=""right""/>; otherwise, <see langword=""false""/>.
	/// </returns>
	public static Boolean operator <({1} left, {1} right) => left.CompareTo(right) < 0;
}}
#nullable restore";

	/// <summary>
	/// Generates operators for self-equatable structures.
	/// </summary>
	/// <param name="primitiveSymbol">A type symbol of self-equatable structure.</param>
	/// <param name="context">Generation context.</param>
	/// <param name="underlineType">Primitive underline type.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void GeneratePrimitiveOperators(this ISymbol primitiveSymbol, GeneratorExecutionContext context,
		String underlineType)
	{
		String fileName = $"{primitiveSymbol.Name}.Equals.g.cs";
		String source = String.Format(GenerationExtensions.primitiveOperatorsFormat,
		                              primitiveSymbol.ContainingNamespace, primitiveSymbol.Name, underlineType);
		context.AddSource(fileName, source);
	}
}