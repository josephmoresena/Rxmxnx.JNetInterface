using System;
using System.ComponentModel;
using System.Linq;
using System.Text;

using Microsoft.CodeAnalysis;

namespace Rxmxnx.JNetInterface.SourceGenerator;

internal static partial class GenerationExtensions
{
	private const String staticConstructorFormat = @"#nullable enable
// <auto-generated/>
namespace {0};

partial class {1} 
{{
	/// <summary>
	/// Static constructor.
	/// </summary>
	static {1}()
	{{
{2}	}}
}}
#nullable restore";

	/// <summary>
	/// Generates static constructor for UTF-8 constants container.
	/// </summary>
	/// <param name="utf8ClassContainerSymbol">A class symbol of UTF-8 constants container.</param>
	/// <param name="context">Generation context.</param>
	public static void GenerateUtf8ContainerInitializer(this INamedTypeSymbol utf8ClassContainerSymbol,
		GeneratorExecutionContext context)
	{
		StringBuilder strBuild = new();
		foreach (ISymbol symbol in utf8ClassContainerSymbol.GetMembers())
		{
			String? value = symbol.GetLiteralValue();
			if (value is not null)
				strBuild.AppendLine($"\t\t{symbol.Name} = new(() => \"{value}\"u8);");
		}

		context.AddSource(
			$"{utf8ClassContainerSymbol.Name}.StaticConstructor.g.cs",
			GenerationExtensions.GenerateUtf8ContainerConstructor(utf8ClassContainerSymbol, strBuild));
	}

	/// <summary>
	/// Retrieves the literal value for UTF-8 constant.
	/// </summary>
	/// <param name="symbol">A symbol for UTF-8 constant.</param>
	/// <returns>The string value to assign to UTF-8 constant.</returns>
	private static String? GetLiteralValue(this ISymbol symbol)
	{
		if (!symbol.CanBeReferencedByName)
			return default;

		AttributeData? attribute = symbol.GetAttributes()
		                                 .FirstOrDefault(a => a.AttributeClass?.Name == nameof(DefaultValueAttribute));
		TypedConstant? paramsAttr = (attribute?.ConstructorArguments)?.FirstOrDefault();
		return paramsAttr?.Value as String;
	}
	/// <summary>
	/// Retrieves the generated code for the static constructor of a UTF-8 constants container type.
	/// </summary>
	/// <param name="utf8ContainerSymbol">A type symbol of UTF-8 constants container.</param>
	/// <param name="strBuild">A builder with all UTF-8 constants initialization.</param>
	/// <returns>The content of the generated source code.</returns>
	private static String GenerateUtf8ContainerConstructor(INamedTypeSymbol utf8ContainerSymbol, StringBuilder strBuild)
		=> String.Format(GenerationExtensions.staticConstructorFormat, 
			utf8ContainerSymbol.ContainingNamespace, utf8ContainerSymbol.Name, strBuild);
}