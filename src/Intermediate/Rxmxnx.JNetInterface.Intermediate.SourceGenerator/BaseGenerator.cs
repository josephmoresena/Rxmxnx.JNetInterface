using System;
using System.Text;

using Microsoft.CodeAnalysis;

namespace Rxmxnx.JNetInterface.SourceGenerator
{
	internal static class BaseGenerator
    {
		public const String AssemblyName = "Rxmxnx.JNetInterface.Base.Intermediate";

		public static void Execute(GeneratorExecutionContext context)
		{
			if (context.Compilation.AssemblyName != AssemblyName)
				return;

			GenerateUnicode(context, "Rxmxnx.JNetInterface.Internal.UnicodeClassNames");
            GenerateUnicode(context, "Rxmxnx.JNetInterface.Internal.UnicodePrimitiveArraySignatures");
            GenerateUnicode(context, "Rxmxnx.JNetInterface.Internal.UnicodeValueNames");
            GenerateUnicode(context, "Rxmxnx.JNetInterface.UnicodeMethodNames");
            GenerateUnicode(context, "Rxmxnx.JNetInterface.UnicodeMethodSignatures");
            GenerateUnicode(context, "Rxmxnx.JNetInterface.UnicodeObjectSignatures");
        }

        private static void GenerateUnicode(GeneratorExecutionContext context, String fullyQualifiedClassName)
        {
            StringBuilder strBuild = new StringBuilder();
            INamedTypeSymbol tClass = context.Compilation.GetTypeByMetadataName(fullyQualifiedClassName);
            foreach (ISymbol symbol in tClass.GetMembers())
                if (JNetInterfaceGenerator.GetLiteralValue(symbol) is String value)
                    strBuild.AppendLine($"\t\t{symbol.Name} = new(() => \"{value}\"u8);");
            context.AddSource($"{tClass.Name}.g.cs", GetGeneratedUnicode(tClass, strBuild));
        }

		private static String GetGeneratedUnicode(INamedTypeSymbol tClass, StringBuilder strBuild)
			=> $@"// <auto-generated/>
namespace {tClass.ContainingNamespace};

partial class {tClass.Name} 
{{
	/// <summary>
	/// Static constructor.
	/// </summary>
	static {tClass.Name}()
	{{
{strBuild}	}}
}}";
    }
}
