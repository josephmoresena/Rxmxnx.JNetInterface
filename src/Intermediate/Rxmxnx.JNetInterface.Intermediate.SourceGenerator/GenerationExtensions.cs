using System;
using System.ComponentModel;
using System.Linq;
using System.Text;

using Microsoft.CodeAnalysis;

namespace Rxmxnx.JNetInterface.SourceGenerator
{
    internal static class GenerationExtensions
    {
        public static void GenerateUnicodeConstructor(this GeneratorExecutionContext context, String fullyQualifiedClassName)
        {
            INamedTypeSymbol tClass = context.Compilation.GetTypeByMetadataName(fullyQualifiedClassName);
            if (tClass != null)
            {
                StringBuilder strBuild = new StringBuilder();
                foreach (ISymbol symbol in tClass.GetMembers())
                    if (symbol.GetLiteralValue() is String value)
                        strBuild.AppendLine($"\t\t{symbol.Name} = new(() => \"{value}\"u8);");
                context.AddSource($"{tClass.Name}.g.cs", GetGeneratedUnicode(tClass, strBuild));
            }
        }
        public static String GetLiteralValue(this ISymbol symbol)
        {
            if (symbol.CanBeReferencedByName)
            {
                AttributeData attribute = symbol.GetAttributes()
                    .FirstOrDefault(a => a.AttributeClass.Name == nameof(DefaultValueAttribute));
                TypedConstant? paramsAttr = (attribute?.ConstructorArguments)?.FirstOrDefault();
                return paramsAttr?.Value as String;
            }

            return default;
        }
        public static String GetOrdinalSuffix(this Int32 num)
        {
            String number = num.ToString();
            if (number.EndsWith("11")) return "th";
            if (number.EndsWith("12")) return "th";
            if (number.EndsWith("13")) return "th";
            if (number.EndsWith("1")) return "st";
            if (number.EndsWith("2")) return "nd";
            if (number.EndsWith("3")) return "rd";
            return "th";
        }

        private static String GetGeneratedUnicode(INamedTypeSymbol tClass, StringBuilder strBuild)
            => $@"// <auto-generated/>
namespace {tClass.ContainingNamespace};

partial class {tClass.Name} 
{{
	/// <summary>
	/// Static constructor.
	/// </summary>
	static {tClass.Name}()
	{{
{strBuild}	}}
}}";
    }
}
