<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>
        <RootNamespace>Rxmxnx.JNetInterface.Tests</RootNamespace>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <IsPackable>false</IsPackable>
    </PropertyGroup>

    <ItemGroup>
        <AssemblyAttribute Include="System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage"/>
    </ItemGroup>

    <ItemGroup>
        <Using Include="System.Buffers"/>
        <Using Include="System.Collections"/>
        <Using Include="System.Collections.Concurrent"/>
        <Using Include="System.Diagnostics.CodeAnalysis"/>
        <Using Include="System.Linq.Expressions"/>
        <Using Include="System.Reflection"/>
        <Using Include="System.Runtime.CompilerServices"/>
        <Using Include="System.Runtime.InteropServices"/>
        <Using Include="System.Text"/>

        <Using Include="Xunit"/>
        <Using Include="AutoFixture"/>
        <Using Include="NSubstitute"/>

        <Using Include="Rxmxnx.PInvoke"/>
        <Using Include="Rxmxnx.JNetInterface.Internal"/>
        <Using Include="Rxmxnx.JNetInterface.Internal.Localization"/>
        <Using Include="Rxmxnx.JNetInterface.Io"/>
        <Using Include="Rxmxnx.JNetInterface.Lang"/>
        <Using Include="Rxmxnx.JNetInterface.Lang.Annotation"/>
        <Using Include="Rxmxnx.JNetInterface.Lang.Reflect"/>
        <Using Include="Rxmxnx.JNetInterface.Native"/>
        <Using Include="Rxmxnx.JNetInterface.Native.Access"/>
        <Using Include="Rxmxnx.JNetInterface.Native.Identifiers"/>
        <Using Include="Rxmxnx.JNetInterface.Native.References"/>
        <Using Include="Rxmxnx.JNetInterface.Native.Values"/>
        <Using Include="Rxmxnx.JNetInterface.Nio"/>
        <Using Include="Rxmxnx.JNetInterface.Primitives"/>
        <Using Include="Rxmxnx.JNetInterface.Restricted"/>
        <Using Include="Rxmxnx.JNetInterface.Types"/>
        <Using Include="Rxmxnx.JNetInterface.Types.Metadata"/>
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.14.1" />
        <PackageReference Include="xunit" Version="2.9.3"/>
        <PackageReference Include="Xunit.SkippableFact" Version="1.5.23"/>
        <PackageReference Include="AutoFixture" Version="4.18.1"/>
        <PackageReference Include="NSubstitute" Version="5.3.0"/>
        <PackageReference Include="xunit.runner.visualstudio" Version="3.1.1">
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
            <PrivateAssets>all</PrivateAssets>
        </PackageReference>
        <PackageReference Include="coverlet.collector" Version="6.0.4">
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
            <PrivateAssets>all</PrivateAssets>
        </PackageReference>
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="..\Proxies\Rxmxnx.JNetInterface.Implementation.Tests.Proxies\Rxmxnx.JNetInterface.Implementation.Tests.Proxies.csproj"/>
    </ItemGroup>

    <!-- Ensure proxy libraries are built before tests -->
    <Target Name="EnsureProxyLibrariesBuilt" BeforeTargets="Build">

        <PropertyGroup>
            <NativeProxiesSourceBasePath>..\Proxies\Native\</NativeProxiesSourceBasePath>
            <NativeProxyOutputPath>$(MSBuildProjectDirectory)\$(OutputPath)</NativeProxyOutputPath>
            <NativeProxyIntermediateOutputPath>$(MSBuildProjectDirectory)\$(BaseIntermediateOutputPath)</NativeProxyIntermediateOutputPath>
            <!-- Common properties for all builds -->
            <CommonBuildProperties>PublishDir=$(NativeProxyOutputPath);TargetFramework=net8.0;PublishAot=true</CommonBuildProperties>
            <!-- Set RuntimeIdentifier based on current platform -->
            <RidPrefix Condition="$([MSBuild]::IsOSPlatform('Windows'))">win</RidPrefix>
            <RidPrefix Condition="$([MSBuild]::IsOSPlatform('OSX'))">osx</RidPrefix>
            <RidPrefix Condition="$([MSBuild]::IsOSPlatform('Linux'))">linux</RidPrefix>
            <RidSuffix>$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture.ToString().ToLowerInvariant())</RidSuffix>
            <ProxyRid>$(RidPrefix)-$(RidSuffix)</ProxyRid>
        </PropertyGroup>

        <ItemGroup>
            <NativeProxiesAssemblyNames Include="JvmProxy"/>
            <NativeProxiesAssemblyNames Include="JvmProxy.NoCreate"/>
            <NativeProxiesAssemblyNames Include="JvmProxy.NoVMs"/>
            <NativeProxiesAssemblyNames Include="JvmProxy.NoCreateAndNoVMs"/>
        </ItemGroup>

        <ItemGroup>
            <!-- Identify intermediate C# projects based on their assembly names -->
            <NativeProxiesProjects Include="@(NativeProxiesAssemblyNames)">
                <ProjectPath>$(NativeProxiesSourceBasePath)\%(Identity)\%(Identity).csproj</ProjectPath>
            </NativeProxiesProjects>
        </ItemGroup>

        <!-- Build Native Proxies -->
        <MSBuild Condition="'$(RidPrefix)' != '' And ('$(RidSuffix)' == 'x64' Or '$(RidSuffix)' == 'arm64')"
                 Projects="@(NativeProxiesProjects->'%(ProjectPath)')"
                 Targets="Restore"
                 Properties="$(CommonBuildProperties);RuntimeIdentifier=$(ProxyRid)"/>
        <MSBuild Condition="'$(RidPrefix)' != '' And ('$(RidSuffix)' == 'x64' Or '$(RidSuffix)' == 'arm64')"
                 Projects="@(NativeProxiesProjects->'%(ProjectPath)')"
                 Targets="Publish"
                 Properties="$(CommonBuildProperties);RuntimeIdentifier=$(ProxyRid)"/>
    </Target>

</Project>
