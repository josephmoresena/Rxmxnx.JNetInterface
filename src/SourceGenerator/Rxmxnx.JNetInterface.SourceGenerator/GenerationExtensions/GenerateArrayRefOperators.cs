using System;
using System.Runtime.CompilerServices;

using Microsoft.CodeAnalysis;

namespace Rxmxnx.JNetInterface.SourceGenerator;

internal static partial class GenerationExtensions
{
	private const String ArrayRefFormat = @"#nullable enable
// <auto-generated/>
namespace {0};

partial struct {1} : IWrapper<JArrayLocalRef>, IEqualityOperators<{1}, JArrayLocalRef, Boolean>
{{
	[ExcludeFromCodeCoverage]
	JArrayLocalRef IWrapper<JArrayLocalRef>.Value => this.ArrayValue;

	/// <summary>
	/// Determines whether a specified <see cref=""{1}""/> and a <see cref=""JArrayLocalRef""/> instance
	/// have the same value.
	/// </summary>
	/// <param name=""left"">The <see cref=""{1}""/> to compare.</param>
	/// <param name=""right"">The <see cref=""JArrayLocalRef""/> to compare.</param>
	/// <returns>
	/// <see langword=""true""/> if the value of <paramref name=""left""/> is the same as the value 
	/// of <paramref name=""right""/>; otherwise, <see langword=""false""/>.
	/// </returns>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Boolean operator ==({1} left, JArrayLocalRef right) => left._value.Equals(right);

	/// <summary>
	/// Determines whether a specified <see cref=""{1}""/> and a <see cref=""JArrayLocalRef""/> instance
	/// have different values.
	/// </summary>
	/// <param name=""left"">The <see cref=""{1}""/> to compare.</param>
	/// <param name=""right"">The <see cref=""JArrayLocalRef""/> to compare.</param>
	/// <returns>
	/// <see langword=""true""/> if the value of <paramref name=""left""/> is different from the value  
	/// of <paramref name=""right""/>; otherwise, <see langword=""false""/>.
	/// </returns>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Boolean operator !=({1} left, JArrayLocalRef right) => !left._value.Equals(right);

	/// <summary>
	/// Converts a given <see cref=""JArrayLocalRef""/> to <see cref=""{1}""/> instance.
	/// </summary>
	/// <param name=""arrayRef"">A <see cref=""JArrayLocalRef""/> to convert.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	internal static {1} FromReference(in JArrayLocalRef arrayRef) 
		=> NativeUtilities.Transform<JArrayLocalRef, {1}>(arrayRef);
}}
#nullable restore";

	/// <summary>
	/// Generates operators for array reference structures.
	/// </summary>
	/// <param name="arrayRefSymbol">A type symbol of array reference structure.</param>
	/// <param name="context">Generation context.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void GenerateArrayRefOperators(this ISymbol arrayRefSymbol, GeneratorExecutionContext context)
	{
		String fileName = $"{arrayRefSymbol.Name}.ArrayRef.g.cs";
		String source = String.Format(GenerationExtensions.ArrayRefFormat, arrayRefSymbol.ContainingNamespace,
		                              arrayRefSymbol.Name);
#pragma warning disable RS1035
		context.AddSource(fileName, source);
#pragma warning restore RS1035
	}
}