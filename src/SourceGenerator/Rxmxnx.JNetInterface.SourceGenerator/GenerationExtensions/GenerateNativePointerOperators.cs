using System;
using System.Runtime.CompilerServices;
using System.Text;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Rxmxnx.JNetInterface.SourceGenerator;

internal static partial class GenerationExtensions
{
	private const String NativePointerOperatorsFormat = @"#nullable enable
// <auto-generated/>
namespace {0};

partial struct {1} : IEquatable<{1}>, IEqualityOperators<{1}, {1}, Boolean>
{{
	/// <inheritdoc/>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Boolean Equals({1} other) => this.{2}.Equals(other.{2});

	/// <inheritdoc cref=""IEqualityOperators{{TSelf, TOther, Boolean}}.op_Equality(TSelf, TOther)"" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Boolean operator ==({1} left, {1} right) => left.Equals(right);
	/// <inheritdoc cref=""IEqualityOperators{{TSelf, TOther, Boolean}}.op_Inequality(TSelf, TOther)"" />
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Boolean operator !=({1} left, {1} right) => !(left == right);
}}
#nullable restore";

	/// <summary>
	/// Generates operators for self-equatable structures.
	/// </summary>
	/// <param name="nativeSymbol">A type symbol of self-equatable structure.</param>
	/// <param name="context">Generation context.</param>
	/// <param name="valueName">Internal absolute value field name.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void GenerateNativePointerOperators(this ISymbol nativeSymbol, SourceProductionContext context,
		String valueName)
	{
		String fileName = $"{nativeSymbol.Name}.Pointer.g.cs";
		String source = String.Format(GenerationExtensions.NativePointerOperatorsFormat,
		                              nativeSymbol.ContainingNamespace, nativeSymbol.Name, valueName);
#pragma warning disable RS1035
		context.AddSource(fileName, SourceText.From(source, Encoding.UTF8));
#pragma warning restore RS1035
	}
}