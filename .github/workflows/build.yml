name: Build
on:
  push:
    branches:
      - main
  pull_request:
    types: [ opened, synchronize, reopened ]
jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_USE_MSBUILD_SERVER: false
    steps:
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.x

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          New-Item -Path ./.sonar/scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Remove ApplicationTest
        shell: bash
        run: |
          find src/ApplicationTest -name "*.*proj" -exec dotnet sln src remove {} \;
          rm -rf src/ApplicationTest

      - name: Clean test results
        run: rm -rf TestResults/

      - name: Build and analyze Sonar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"josephmoresena_Rxmxnx.JNetInterface" /o:"josephmoresena" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.scanner.scanAll=false /d:sonar.coverage.exclusions="**Test.cs,**Tests.cs,**test.cs,**tests.cs,**/SourceGenerator/**/*.cs,**/ApplicationTest/**/*,**/Test/**/*.cs" /d:sonar.cs.vstest.reportsPaths=TestResults/*.trx /d:sonar.cs.opencover.reportsPaths=TestResults/*/coverage.opencover.xml 
          dotnet build-server shutdown
          dotnet restore src
          dotnet build src --no-restore --configuration release --disable-build-servers /nr:false /maxcpucount:1
          dotnet test src --verbosity detailed --collect:"XPlat Code Coverage" --results-directory TestResults/ --logger "trx;verbosity=detailed" --no-build --no-restore --configuration release -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover 
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
      - name: Pack core assembly
        working-directory: ./package/Rxmxnx.JNetInterface.Core
        run: |
          dotnet pack -c Release -o ../Nuget /p:Version=9999.99.99.99-tmp /p:NoIntermediateBuild=true
          for package in ../Nuget/Rxmxnx.JNetInterface.Core*.*nupkg; do
            echo "-----------------------------------"
            TEMP_DIR=$(mktemp -d)
            unzip -q "$package" -d "$TEMP_DIR"
            ls -sh "$package"
            tree "$TEMP_DIR" -h --noreport | tail -n +2 | sed "s|$TEMP_DIR/||"
            rm -rf "$TEMP_DIR"
          done
          echo "-----------------------------------"
      - name: Pack main assembly
        working-directory: ./package/Rxmxnx.JNetInterface
        run: |
          dotnet pack -c Release /p:Version=9999.99.99.99-tmp /p:NoIntermediateBuild=true
          for package in bin/Release/Rxmxnx.JNetInterface*.*nupkg; do
            echo "-----------------------------------"
            TEMP_DIR=$(mktemp -d)
            unzip -q "$package" -d "$TEMP_DIR"
            ls -sh "$package"
            tree "$TEMP_DIR" -h --noreport | tail -n +2 | sed "s|$TEMP_DIR/||"
            rm -rf "$TEMP_DIR"
          done
          echo "-----------------------------------"
          
  app-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    steps:
      - uses: actions/checkout@v4
      - name: APT deb822 sources
        if: runner.os == 'Linux'
        run: |
          if [[ $ImageOS == "ubuntu24" ]]; then
           sudo bash -c 'cat > /etc/apt/sources.list.d/ubuntu.sources <<EOF
          Types: deb
          URIs: http://archive.ubuntu.com/ubuntu/
          Suites: noble
          Components: main restricted universe
          Architectures: amd64
          
          Types: deb
          URIs: http://security.ubuntu.com/ubuntu/
          Suites: noble-security
          Components: main restricted universe
          Architectures: amd64
          
          Types: deb
          URIs: http://archive.ubuntu.com/ubuntu/
          Suites: noble-updates
          Components: main restricted universe
          Architectures: amd64
          
          Types: deb
          URIs: http://azure.ports.ubuntu.com/ubuntu-ports/
          Suites: noble
          Components: main restricted multiverse universe
          Architectures: arm64
  
          Types: deb
          URIs: http://azure.ports.ubuntu.com/ubuntu-ports/
          Suites: noble-updates
          Components: main restricted multiverse universe
          Architectures: arm64
          
          Types: deb
          URIs: http://azure.ports.ubuntu.com/ubuntu-ports/
          Suites: noble-updates
          Components: main restricted multiverse universe
          Architectures: armhf
          EOF'
          fi
          
      - name: Setup NativeAOT pre-requisites
        if: runner.os == 'Linux'
        run: |
          sudo dpkg --add-architecture arm64
          sudo dpkg --add-architecture armhf
          
          sudo bash -c 'cat > /etc/apt/sources.list.d/arm64.list <<EOF
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble main restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble-updates main restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble-backports main restricted universe multiverse
          EOF'
          
          sudo bash -c 'cat > /etc/apt/sources.list.d/armhf.list <<EOF
          deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ noble main restricted
          deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ noble-updates main restricted
          deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ noble-backports main restricted universe multiverse
          EOF'
          
          sudo sed -i -e 's/deb http/deb [arch=amd64] http/g' /etc/apt/sources.list
          sudo sed -i -e 's/deb mirror/deb [arch=amd64] mirror/g' /etc/apt/sources.list
          
          sudo apt update
          sudo apt-get install clang llvm zlib1g-dev libkrb5-dev \
            qemu-user qemu-user-static \
            binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu zlib1g-dev:arm64 \
            binutils-arm-linux-gnueabihf gcc-arm-linux-gnueabihf zlib1g-dev:armhf \
            --assume-yes

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x
            
      - name: Run launcher (Unix-like)
        if: runner.os != 'Windows'
        working-directory: ./src/ApplicationTest/Rxmxnx.JNetInterface.LauncherTest
        run: dotnet run -c Release "../." "../../../artifacts"    
          
      - name: Run launcher (Windows)
        if: runner.os == 'Windows'
        run: dotnet run -p "src\ApplicationTest\Rxmxnx.JNetInterface.LauncherTest\Rxmxnx.JNetInterface.LauncherTest.csproj" -c Release "src\ApplicationTest" "artifacts"
          
      - name: Create Native Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-Artifact
          path: |
            ./artifacts/*.class
            ./artifacts/*.jar
            ./artifacts/ApplicationTest*NAOT*
            ./artifacts/ApplicationTest*RFM*
            ./artifacts/*HelloJni.*    
            
      - name: Create Native Artifact Logs
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-Artifact-Logs
          path: |
            ./artifacts/native/*