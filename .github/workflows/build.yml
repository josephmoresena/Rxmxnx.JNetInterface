name: Build
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and analyze
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    env:
      DOTNET_CLI_USE_MSBUILD_SERVER: false
    steps:
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'oracle'

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          New-Item -Path ./.sonar/scanner -ItemType Directory
          dotnet build-server shutdown
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
          
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"josephmoresena_Rxmxnx.JNetInterface" /o:"josephmoresena" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.scanner.scanAll=false /d:sonar.coverage.exclusions="**Test.cs,**Tests.cs,**test.cs,**tests.cs,**.SourceGenerator/**/*.cs,**ApplicationTest/**/*" /d:sonar.cs.vstest.reportsPaths=TestResults/*.trx /d:sonar.cs.opencover.reportsPaths=TestResults/*/coverage.opencover.xml /d:sonar.cpd.exclusions="**Test/*.cs"
          dotnet build-server shutdown
          dotnet clean src --configuration release /nr:false
          dotnet build-server shutdown
          dotnet restore src /nr:false
          dotnet build-server shutdown
          dotnet build src --no-restore --configuration release --disable-build-servers /nr:false /maxcpucount:1
          if ($LastExitCode -ne 0) { exit $LastExitCode }  
          dotnet test src --verbosity detailed --collect:"XPlat Code Coverage" --results-directory TestResults/  --logger "trx;verbosity=detailed" --no-build --no-restore --configuration release -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          if ($LastExitCode -ne 0) { exit $LastExitCode }  
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          if ($LastExitCode -ne 0) { exit $LastExitCode }  
          
  run-linux-x64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup NativeAOT pre-requisites
      run: sudo apt-get install clang zlib1g-dev libkrb5-dev --assume-yes
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: 21
        distribution: 'oracle'
    - name: Publish
      run: |
         dotnet run src/ApplicationTest/Rxmxnx.JNetInterface.ApplicationTest
  run-naot-linux-x64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup NativeAOT pre-requisites
      run: sudo apt-get install clang zlib1g-dev libkrb5-dev --assume-yes
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: 21
        distribution: 'oracle'
    - name: Publish
      run: |
         dotnet build src/ApplicationTest/Rxmxnx.JNetInterface.ApplicationTest -r linux-x64 --artifacts-path .
         ./Rxmxnx.JNetInterface.ApplicationTest
